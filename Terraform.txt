


[	Terraform Installation in Linux		]

* https://www.terraform.io/downloads.html.
*sudo unzip terraform_<version>.zip -d /usr/local/bin/
*export PATH=$PATH:/usr/local/bin/
*terraform --version


//Fetching data from maps and list in variable

Example:
resource "aws_instance" "myec2"{
ami=""
instance_type= var.types["us-west-2"] OR instance_type=var.list[1]
}

//Variable Types
variable "types"{
types=map
default = {
us-east-1 = "t2.nano"
us-west-2 = "t2.micro"
ap-south-1 = "t2.small"
}
}

//variable Maps
variable "list"{
 type = list
 default = ["mx.large", "m5.xlarge", "t2.medium"]
 }
 
 //Condition
 Example:
  count = var.test = true ? 3 : 0
  
  //Data Source Code
  
  data "aws_ami" "app_ami"{
  most_recent = true
  owners = ["amazon"]
  
  filter {
   name = "name"
   values = ["amzn2-ami-hvm*"]
   }
   }
   
   resource "aws_instance" "instance_type"{
   ami = data.aws_ami.app_ami
   instance_type = "t2.micro"
   }
   
   // To Log
   TF_LOG_PATH
   
   Splat Expression:
   Splat Expression allows us to get a list of all the attributes
   
   Terraform graph:
   The terraform graph command is used to generate a visual represtation  of either a configuration or execution plan
   
   Terraform plan File Saved:
   terraform plan -out=demopath
   
   Terraform Refresh: It will not run the whole services it will just run the newly added one
   Command: terraform plan -refresh=false
   
   ZipMap:
   The zipmap functions constructs a map from a list of keys and a corresponding list of values
   
   Toset:
   Toset function will convert the list of values to SET.
 
   Two Types of Provisioner:
   1.Creation-Time Provisioner
   2.Destroy-Time Provisioner
   
   
   [ Tier Architecture ]
   
  [ Main.tf File ]
  
  
provider "aws" {
    region = "us-east-1"
    access_key = "AKIA4EPLM6AJPUER65B4"
    secret_key =  "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" 
}

terraform {
  backend "pg" {}
}

resource "aws_instance" "Terraform_EC2_One" {
    ami = var.aws_ami
    instance_type = var.aws_instance_type
    tags = {
      "Name" = "Terraform ProTalk"
    }
}

#####################[VPC Block]##################################
resource "aws_vpc" "new-VPC" {
    cidr_block = var.cidr_block
}
#####################[IGW]############################
resource "aws_internet_gateway" "new-IG" {
    vpc_id = aws_vpc.new-VPC.id
    tags = {
      "Name" = "igw"
    }
}
################[Subnet Block1]####################
resource "aws_subnet" "new-subnet-Public1" {
    vpc_id = aws_vpc.new-VPC.id
    cidr_block = var.cidr_block_public_subnet1
    tags = {
      "Name" = "subnet-Public"
    }
}

################[Subnet Block2]####################
resource "aws_subnet" "new-subnet-Public2" {
    vpc_id = aws_vpc.new-VPC.id
    cidr_block = var.cidr_block_public_subnet2
    tags = {
      "Name" = "subnet-Public"
    }
}

resource "aws_subnet" "new-subnet-Private" {
    vpc_id = aws_vpc.new-VPC.id
    cidr_block = var.cidr_block_private
    tags = {
      "Name" = "subnet-Private"
    }
}

################[Route Table Block]####################
resource "aws_route_table" "new-RouteTable" {
    vpc_id = aws_vpc.new-VPC.id
    route = []
    tags = {
      "Name" = "Routetable"
      }  
}

##############[Route Block for Route Table created above]##############
resource "aws_route" "new-Route" {
  route_table_id = aws_route_table.new-RouteTable.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.new-IG.id
  depends_on = [aws_route_table.new-RouteTable]
}

##############[Route Table Association]#######################
resource "aws_route_table_association" "Public-Association" {
  subnet_id = aws_subnet.new-subnet-Public.id
  route_table_id = aws_route_table.new-RouteTable.id
}


resource "aws_db_instance" "default" {
  engine = "mysql"
  instance_class       = "t2.micro"
  skip_final_snapshot  = true
}


esource "aws_lb" "test" {
  name               = "test-lb-tf"
  internal           = false
  load_balancer_type = "application"
  subnets            = [aws_subnet.new-subnet-Public1.id]
  enable_deletion_protection = true
  tags = {
    Environment = "Application load balancer"
  }
}


[ Variable File ]

variable "aws_instance_type" {
  description = "Instance type t2.micro"
  type = string
  default = "t2.micro"
}

variable "aws_ami" {
  type = string
  default = "ami-0cff7528ff583bf9a"
}

variable "cidr_block" {
    description = "cidr for new-VPC"
    type = string
    default = "10.0.0.0/16"
}

variable "cidr_block_public_subnet1" {
  type = string
  default = "10.0.1.0/24"
}

variable "cidr_block_public_subnet2" {
  type = string
  default = "10.0.2.0/24"
}


variable "cidr_block_private" {
  type = string
  default = "10.0.3.0/24"
}


   [Terraform EC2 launch using Json ]
   
   {
  "provider": {
        "aws": {
            "region": "us-east-1",
            "access_key": "AKIA4EPLM6AJPUER65B4",
            "secret_key": "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"
        }
    },
    "resource": {
        "aws_instance": {
            "test_ec2": {
                "instance_type": "t2.micro",
                "ami": "ami-0022f774911c1d690",
                "associate_public_ip_address": "true"
            }
        }
    }
}

  [ Variable File ]
  
  {
    "variable": {
      "ami": {
        "type": "string",
        "default": "ami-0022f774911c1d690"
      }
    },
    "variable" :{
      "instance": {
          "type": "list(string)",
          "default": ["t2.micro", "t2.small", "c4.large", "c4.xlarge"]
      }
  }
}
  
 
  [ Terraform EC2 instance with security group, Route Table, Subnet ]
  
  provider "aws" {
    region = "us-east-1"
    access_key = "AKIA4EPLM6AJPUER65B4"
    secret_key =  "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" 
}
//Public Instance 1
resource "aws_instance" "Terraform_EC2_One" {
    ami = var.ami_id
    instance_type = var.instance_type
    key_name = "key_demo_public"
    subnet_id = "${aws_subnet.subnet1.id}"
    security_groups = [aws_security_group.new-sg.name]
    tags = {
      "Name" = var.tag_name
    }
}
//Public Instance 2
resource "aws_instance" "Terraform_EC2_Two" {
    ami = "ami-0f9fc25dd2506cf6d"
    instance_type = var.instance_type
    key_name = "key_demo_public"
    subnet_id = "${aws_subnet.subnet2.id}"
    # security_groups = [aws_security_group.new-sg.name]
    tags = {
      "Name" = var.tag_name
    }
}

// Create VPC
resource "aws_vpc" "main" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"
  tags = {
    Name = "main"
  }
}

//Create Public Subnet
resource "aws_subnet" "subnet1" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "us-east-1a"

  tags = {
    Name = "Main"
  }
}

resource "aws_subnet" "subnet2" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "10.0.2.0/24"
  availability_zone = "us-east-1b"

  tags = {
    Name = "Main"
  }
}

//Create Internet Gateway in VPC

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "main"
  }
}

//Create Route Table For Internet Gateway
resource "aws_route_table" "dev-public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }
  tags = {
    Name = "dev-public-1"
  }
}

resource "aws_route_table_association" "dev-public-1-a" {
  subnet_id = aws_subnet.subnet1.id
  route_table_id = aws_route_table.dev-public.id
}

resource "aws_route_table_association" "dev-public-2-a" {
  subnet_id = aws_subnet.subnet2.id
  route_table_id = aws_route_table.dev-public.id
}

resource "aws_security_group" "new-sg" {
  name = "Allow Traffic"
  description = "security_group"
  ingress {
      protocol ="0"
      from_port = 22
      to_port = 22
      cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
      protocol = "0"
      from_port = 22
      to_port = 22
      cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_key_pair" "deployer" {
  key_name = "key_demo_public"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABZQDwJ3SeGoS7eqEi+G99C9iCfYyNI4icAhY3f1gZqVpYuFu2TH7kszdqvewT4KP2QrWi//ss6+zfVC1d+dIf+KCNbSUJUaORd9Ie123uUuM1BEjnUudFUob1Gc3+nRCSbi1RzSxVaDhUHnjgODSPe0Rl0NsYvBGgo3dYr83xxHEUmeWpCIr07g8j4l3sbyKEoEua9Q+Wb4SUjtUkC15rTKZZBE33lpl+TTKzAYTMxYfXuVWo1fBv2Ksc54j7NTikqGrL1iJoadAkxTuht0Q7V0FFmD0btJiz2fsVQUffVjo90Xu5loKovrC/miyLLahuAt4mc0CaV8xtekP+RkmArMsMww0+zwGn5WXjgI4Bui1T4vgwd204O6WJBbvqc0WRxFrMtZ6CRjhc9Jl5027jXFd+L/bymoCagDaL/Q1O5BEQZDJR8ZPuMG2cDJiOyJ+lD5/2z4teYYFBEED4e+h/MtwfNulaIw== admin@DESKTOP-DDMDDTU"
}

# output "my_security_output" {
#   value = aws_instance.EC2.security_groups
# }


[ Variable File ]



variable "instance_type" {
   description = "Instance type t2.micro"
   type        = string
   default     = "t2.micro"
} 

variable "tag_name" {
  description = "Tag name for ec2 instance"
  default = "Hello"
}

variable "ami_id" {
  description = "AMI for Ubuntu Ec2 Instance"
  default = "ami-0f9fc25dd2506cf6d"
}

  [Terraform S3 Creation ]
  
  provider "aws" {
    region = "us-east-1"
    access_key = "AKIA4EPLM6AJPUER65B4"
    secret_key =  "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" 
}
terraform {
  backend "pg" {}

}
resource "aws_s3_bucket" "bucket" {
  bucket = "arshadqureshhi"

  tags = {
      Name = "My Bucket"
      Environment = "Dev"
  }
}
resource "aws_s3_bucket_object" "bucket_object" {
  bucket = "arshadqureshhi"
  key = "hello world"
}
output "fetched_bucket_data" {
    value = aws_s3_bucket.bucket.region
}